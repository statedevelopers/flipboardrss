<?php

/**
 * @file
 * Module providing fields-based views style plugin for RSS feed generation.
 */

/**
 * Module installation path.
 */

define('FLIPBOARDRSS_PATH', drupal_get_path('module', 'flipboardrss'));

/**
 * Implements hook_help().
 */
function flipboardrss_help($path, $arg) {
  return '<p>' . t('.') . '</p>';
}

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function flipboardrss_menu() {
  $items = array();
  $items['admin/config/media/flipboardrss'] = array(
    'title' => 'Flipboard Publishing Settings',
    'description' => 'Define what hub to publish to.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flipboardrss_admin_settings'),
    'access arguments' => array('administer flipboardrss'),
    'file' => 'flipboardrss.admin.inc',
  );

  return $items;
}

function flipboardrss_ping() {
  $hub_url = variable_get('flipboardrss_hub_url');
  $feed_url = variable_get('flipboardrss_feed_url');
  $options = array(
    'method' => 'POST',
    'data' => array(
      'hub.mode="publish"&hub.url="' . $feed_url . '"',
    ),
  );

  // Send ping.
  dvm($hub_url);
  dvm($options);
  $result = drupal_http_request($hub_url, $options);
  dvm($result);

  // Process HTTP response code.
/*  switch ($result->code) {
    case 304:
      break;
    case 301:
      $feed->url = $result->redirect_url;
    // Do not break here.
    case 200:
    case 302:
    case 307:
      if (!isset($result->data)) {
        $result->data = '';
      }
      if (!isset($result->headers)) {
        $result->headers = array();
      }
      $feed->source_string = $result->data;
      $feed->http_headers = $result->headers;
      break;
    default:
      watchdog('aggregator', 'The feed from %site seems to be broken, due to "%error".', array('%site' => $feed->title, '%error' => $result->code . ' ' . $result->error), WATCHDOG_WARNING);
      drupal_set_message(t('The feed from %site seems to be broken, because of error "%error".', array('%site' => $feed->title, '%error' => $result->code . ' ' . $result->error)));
  }
*/
}

/**
 * Implements hook_views_api().
 */
function flipboardrss_views_api() {
  return array(
    'api' => 3,
    'path' => FLIPBOARDRSS_PATH . '/views',
  );
}

/**
 * Preprocess callback.
 * Replaces relative paths in element values with absolute URLs.
 * Originates from Views RSS module, which was
 * based on preg_match from rel_to_abs module by lourenzo,
 * with added patch from issue #1335734 by joelstein.
 * @see http://drupal.org/project/rel_to_abs
 * @see http://drupal.org/node/1335734
 */
function flipboardrss_rewrite_relative_paths(&$variables) {
  // Rewriting relative paths should be enabled by default,
  // so rewrite relative paths even if option value is not set.
  if (
    !isset($variables['view']->style_plugin->options['feed_settings']['absolute_paths'])
    || !empty($variables['view']->style_plugin->options['feed_settings']['absolute_paths'])
  ) {
    global $base_path;
    foreach ($variables['elements'] as $delta => $element) {
      if (isset($element['value'])) {
        // Value is an array, so this is a set of subelements.
        if (is_array($element['value'])) {
          views_rss_rewrite_relative_paths($variables['elements'][$delta]['value']);
        }
        // Value is a string, so just process it.
        else {
          $pattern = '/(src|href)=(\'|")[^\/]' . preg_quote($base_path, '/') . '/';
          $replacement = '$1=$2' . url('<front>', array('absolute' => TRUE));
          $variables['elements'][$delta]['value'] = preg_replace($pattern, $replacement, $element['value']);
        }
      }
    }
  }
}
